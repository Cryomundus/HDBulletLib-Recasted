version "4.5"

#include "BulletLib/50AE.zsc"
#include "BulletLib/Slugs.zsc"
#include "BulletLib/500S&W.zsc"
#include "BulletLib/50OMG.zsc"
#include "BulletLib/45ACP.zsc"
#include "BulletLib/10mmAuto.zsc"
#include "BulletLib/45LC.zsc"
#include "BulletLib/LessLethalShells.zsc"
#include "BulletLib/ExplosiveSlugs.zsc"
#include "BulletLib/Golden45LC.zsc"
#include "BulletLib/FlareShells.zsc"
#include "BulletLib/56CalBall.zsc"
#include "BulletLib/4Gauge.zsc"
#include "BulletLib/5mm.zsc"
#include "BulletLib/6mmFlechettes.zsc"
#include "BulletLib/50AM.zsc"
#include "BulletLib/069 Bore 420 Frei.zsc"
#include "BulletLib/Thunder & Tortoise Rockets.zsc"
#include "BulletLib/20mm Grenades.zsc"
#include "BulletLib/30-06.zsc"

class HDBulletLibHandler : EventHandler
{
	// [Ace] Order here must match order in menu. And zscript files. - [Ted]
	static const class<HDAmmo> RemovedClasses[] =
	{
		"HD50AEAmmo", "HDSlugAmmo", "HD500SWLightAmmo", "HD500SWHeavyAmmo", "HD50OMGAmmo", "HD45ACPAmmo", "HD10mAmmo", "HD45LCAmmo", "HDLLShellAmmo", "HDExplosiveShellAmmo", "HDGold45LCAmmo", "HDFlareAmmo", "HDBallAmmo", "HD4GSAmmo", "HD5mm_Ammo", "HD6mmFlechetteAmmo", "HD50AM_Ammo", "HDAurochsAmmo", "HD069BoreAmmo", "TenMilBrass", "Wan_ThuRKTAmmo", "Wan_TortRKTAmmo", "WAN_20mmGrenadeAmmo", "ThirtyAughtSixAmmo", "ThirtyAughtSixBrass"
	};

	private transient CVar AmmoSpawns[3]; // [Ace] Future-proofing. I doubt this library will ever have 32 * 3 ammo types and projectiles.
	private HDAmBoxList AmmoBoxList;

	override void WorldThingSpawned(WorldEvent e)
	{
		for (int i = 0; i < 1 + RemovedClasses.Size() / 32; ++i)
		{	
			if (!AmmoSpawns[i])
			{
				AmmoSpawns[i] = CVar.GetCVar("hdblib_enableammo_"..(i + 1));
			}
		}

		if (e.Thing is 'HDAmBox' && !AmmoBoxList) // [Ace] Only do it for the first ammo box encountered because they all share the same thinker.
		{
			AmmoBoxList = HDAmBoxList.Get();
			for (int i = 0; i < AmmoBoxList.InvClasses.Size();)
			{
				int deleted = -1;
				for (int j = 0; j < RemovedClasses.Size(); ++j)
				{
					if (AmmoBoxList.InvClasses[i] == RemovedClasses[j] && !(AmmoSpawns[j / 32].GetInt() & (1 << (j % 32))))
					{
						int index = AmmoBoxList.InvClasses.Find(RemovedClasses[j].GetClassName());
						if (index != AmmoBoxList.InvClasses.Size())
						{
							AmmoBoxList.InvClasses.Delete(index);
							deleted = index;
							continue;
						}
					}
				}
				// [MK] deleting an index lesser or equal to the current one already "advances" on its own
				if ( (deleted == -1) || (deleted > i) )
				{
					i++;
				}
			}
		}
		else if (e.Thing is 'HDBackpack' && !Inventory(e.Thing).Owner)
		{
			Array<class<HDAmmo> > validItems;
			let bp = HDBackpack(e.Thing);
			for (int i = 0; i < RemovedClasses.Size(); ++i)
			{
				if (!(AmmoSpawns[i / 32].GetInt() & (1 << (i % 32))))
				{
					// [Ace] Delete disabled ammo types and spawn something else in their place.
					if (bp.Storage.DestroyItem(RemovedClasses[i]))
					{
						// [Ace] Only populate the list once to save on performance.
						if (validItems.Size() == 0)
						{
							for (int j = 0; j < AllActorClasses.Size(); ++j)
							{
								let invItem = (class<HDAmmo>)(AllActorClasses[j]);
								if (!invItem || invItem is 'HDMagAmmo' || IsRemovedClass(invItem))
								{
									continue;
								}

								if (bp.Storage.CheckConditions(null, invItem) != IType_Invalid)
								{
									validItems.Push(invItem);
								}
							}
						}

						int index = random(0, validItems.Size() - 1);
						let am = GetDefaultByType(validItems[index]);

						int amt = 0;
						amt = int(min(random(1, am.bMULTIPICKUP ? random(1, 80) : random(1, random(1, 20))), am.MaxAmount, bp.MaxCapacity / (max(1.0, am.Bulk) * 5.0)));
						if (am.RefId == "")
						{
							amt = random(-2, amt);
						}
						bp.Storage.AddAmount(am.GetClass(), amt);
					}
				}
			}
		}
	}

	private bool IsRemovedClass(class<HDAmmo> cls)
	{
		for (int i = 0; i < RemovedClasses.Size(); ++i)
		{
			if (cls == RemovedClasses[i])
			{
				return true;
			}
		}

		return false;
	}
}

// Struct for ammo spawning information.
class HDBLRSpawnAmmo play
{
    string spawnname; // ID by string for spawner
    Array<HDBLRSpawnAmmoEntry> spawnreplaces; // ID by string for spawnees
    int spawnreplacessize; // Cached size of the above array
    bool isPersistent; // Whether or not to persistently spawn.
    bool replaceAmmo;
}
 
class HDBLRSpawnAmmoEntry play
{
    string name;
    int chance;
}

class HDBulletLibAmmoSpawner: EventHandler
{
    // List of persistent classes to completely ignore.
    // This -should- mean this mod has no performance impact.
    static const class<actor> blacklist[] =
    {
        "HDSmoke",
        "BloodTrail",
        "CheckPuff",
        "WallChunk",
        "HDBulletPuff",
        "HDFireballTail",
        "ReverseImpBallTail",
        "HDSmokeChunk",
        "ShieldSpark",
        "HDFlameRed",
        "HDMasterBlood",
        "PlantBit",
        "HDBulletActor",
        "HDLadderSection"
    };
   
    // List of ammo spawn associations.
    // used for ammo replacement on mapload.
    array<HDBLRSpawnAmmo> ammospawnlist;
    int ammospawnlistsize;
   
    // appends an entry to ammospawnlist;
    void addAmmo(string name, Array<HDBLRSpawnAmmoEntry> replacees, bool persists, bool rep=true)
    {
        // Creates a new struct;
        HDBLRSpawnAmmo spawnee = HDBLRSpawnAmmo(new('HDBLRSpawnAmmo'));
       
        // Populates the struct with relevant information,
        spawnee.spawnname = name;
        spawnee.isPersistent = persists;
        spawnee.replaceAmmo = rep;
        for(int i = 0; i < replacees.size(); i++)
        {
            spawnee.spawnreplaces.push(replacees[i]);
            spawnee.spawnreplacessize++;
        }
       
        // Pushes the finished struct to the array.
        ammospawnlist.push(spawnee);
        ammospawnlistsize++;
    }
 
    HDBLRSpawnAmmoEntry addAmmoentry(string name, int chance)
    {
        // Creates a new struct;
        HDBLRSpawnAmmoEntry spawnee = HDBLRSpawnAmmoEntry(new('HDBLRSpawnAmmoEntry'));
        spawnee.name = name.makelower();
        spawnee.chance = chance;
        return spawnee;
       
    }
    bool cvarsAvailable;
   
    // Populates the replacement and association arrays.
    void init()
    {
        cvarsAvailable = true;
       
        // --------------------
        // Ammo spawn lists.
        // --------------------
 
        // 500 S&W Lights
        Array<HDBLRSpawnAmmoEntry> spawns_500SWL;  
        spawns_500SWL.push(addAmmoentry('ShellBoxPickup', hdb_500sw_shellbox_spawn_bias));
        spawns_500SWL.push(addAmmoentry('HD9mBoxPickup', hdb_500sw_shellbox_spawn_bias));
        addAmmo('HD500SWLightBoxPickup', spawns_500SWL, hdb_500sw_persistent_spawning);
	// 500 S&W Heavies
        Array<HDBLRSpawnAmmoEntry> spawns_500SWH;  
        spawns_500SWH.push(addAmmoentry('RocketBigPickup', hdb_500sw_rocket_spawn_bias));
        spawns_500SWH.push(addAmmoentry('HDRocketAmmo', hdb_500sw_rocket_spawn_bias));
        addAmmo('HD500SWHeavyBoxPickup', spawns_500SWH, hdb_500sw_persistent_spawning);
	// 500 S&W Casing
        Array<HDBLRSpawnAmmoEntry> spawns_500SWC;  
        spawns_500SWC.push(addAmmoentry('HDSpent9mm', hdb_500sw_casing_spawn_bias));
        spawns_500SWC.push(addAmmoentry('HDSpent355', hdb_500sw_casing_spawn_bias));
        addAmmo('HDSpent500', spawns_500SWC, hdb_500sw_persistent_spawning);

	// 12 Gauge Slug Box
        Array<HDBLRSpawnAmmoEntry> spawns_12gslugbox;  
        spawns_12gslugbox.push(addAmmoentry('ShellBoxPickup', hdb_12gslug_shellbox_spawn_bias));
        addAmmo('SlugBoxPickup', spawns_12gslugbox, hdb_12gslug_persistent_spawning);
	// 12 Gauge Slug Pickup
        Array<HDBLRSpawnAmmoEntry> spawns_12gslugpick;  
        spawns_12gslugpick.push(addAmmoentry('ShellPickup', hdb_12gslug_shell_spawn_bias));
        addAmmo('SlugPickup', spawns_12gslugpick, hdb_12gslug_persistent_spawning);
	// 12 Gauge Slug Ammo
        Array<HDBLRSpawnAmmoEntry> spawns_12gslugammo;  
        spawns_12gslugammo.push(addAmmoentry('HDShellAmmo', hdb_12gslug_shell_spawn_bias));
        addAmmo('HDSlugAmmo', spawns_12gslugammo, hdb_12gslug_persistent_spawning);
	// 12 Gauge Slug Casing
        Array<HDBLRSpawnAmmoEntry> spawns_12gslugcase;  
        spawns_12gslugcase.push(addAmmoentry('HDSpentShell', hdb_12gslug_casing_spawn_bias));
        addAmmo('HDSpentSlug', spawns_12gslugcase, hdb_12gslug_persistent_spawning);

	// .420 Frei Box Pickup
        Array<HDBLRSpawnAmmoEntry> spawns_420freibox;  
        spawns_420freibox.push(addAmmoentry('HD9mBoxPickup', hdb_420frei_box_spawn_bias));
        spawns_420freibox.push(addAmmoentry('HD355BoxPickup', hdb_420frei_box_spawn_bias));
        addAmmo('HD420BoxPickup', spawns_420freibox, hdb_420frei_persistent_spawning);
	// .420 Frei Casing
        Array<HDBLRSpawnAmmoEntry> spawns_420freicasing;  
        spawns_420freicasing.push(addAmmoentry('HDSpent9mm', hdb_420frei_casing_spawn_bias));
        spawns_420freicasing.push(addAmmoentry('HDSpent355', hdb_420frei_casing_spawn_bias));
        addAmmo('HDSpent420', spawns_420freicasing, hdb_420frei_persistent_spawning);

	// .069 Bore Box Pickup
        Array<HDBLRSpawnAmmoEntry> spawns_069borebox;  
        spawns_069borebox.push(addAmmoentry('ShellBoxPickup', hdb_069bore_box_spawn_bias));
        addAmmo('HD069BoreBox', spawns_069borebox, hdb_069bore_persistent_spawning);
	// .069 Bore Casing
        Array<HDBLRSpawnAmmoEntry> spawns_069borecasing;  
        spawns_069borecasing.push(addAmmoentry('HDSpentShell', hdb_069bore_casing_spawn_bias));
        addAmmo('HDSpent069Bore', spawns_069borecasing, hdb_069bore_persistent_spawning);

	// .50 AE Box Pickup
        Array<HDBLRSpawnAmmoEntry> spawns_50aebox;  
        spawns_50aebox.push(addAmmoentry('HD9mBoxPickup', hdb_50ae_box_spawn_bias));
        spawns_50aebox.push(addAmmoentry('HD355BoxPickup', hdb_50ae_box_spawn_bias));
        addAmmo('HD50AEBoxPickup', spawns_50aebox, hdb_50ae_persistent_spawning);
	// .50 AE Casing
        Array<HDBLRSpawnAmmoEntry> spawns_50aecasing;  
        spawns_50aecasing.push(addAmmoentry('HDSpent9mm', hdb_50ae_casing_spawn_bias));
        spawns_50aecasing.push(addAmmoentry('HDSpent355', hdb_50ae_casing_spawn_bias));
        addAmmo('HDSpent50AE', spawns_50aecasing, hdb_50ae_persistent_spawning);

	// .50 OMG Box Pickup
        Array<HDBLRSpawnAmmoEntry> spawns_50omgbox;  
        spawns_50omgbox.push(addAmmoentry('RocketBigPickup', hdb_50omg_box_spawn_bias));
        spawns_50omgbox.push(addAmmoentry('HDRocketAmmo', hdb_50omg_box_spawn_bias));
        addAmmo('HD50OMGBoxPickup', spawns_50omgbox, hdb_50omg_persistent_spawning);
	// .50 OMG Casing
        Array<HDBLRSpawnAmmoEntry> spawns_50omgcasing;  
        spawns_50omgcasing.push(addAmmoentry('SevenMilBrass', hdb_50omg_casing_spawn_bias));
        addAmmo('HDSpent50OMG', spawns_50omgcasing, hdb_50omg_persistent_spawning);

	// .45 ACP Box Pickup
        Array<HDBLRSpawnAmmoEntry> spawns_45acpbox;  
        spawns_45acpbox.push(addAmmoentry('HD9mBoxPickup', hdb_45acp_box_spawn_bias));
        addAmmo('HD45ACPBoxPickup', spawns_45acpbox, hdb_45acp_persistent_spawning);
	// .45 ACP Casing
        Array<HDBLRSpawnAmmoEntry> spawns_45acpcasing;  
        spawns_45acpcasing.push(addAmmoentry('HDSpent9mm', hdb_45acp_casing_spawn_bias));
        addAmmo('HDSpent45ACP', spawns_45acpcasing, hdb_45acp_persistent_spawning);

	// 10mm Box Pickup
        Array<HDBLRSpawnAmmoEntry> spawns_10mmBox;  
        spawns_10mmBox.push(addAmmoentry('HD9mBoxPickup', hdb_10mm_box_spawn_bias));
        spawns_10mmBox.push(addAmmoentry('HD355BoxPickup', hdb_10mm_box_spawn_bias));
        addAmmo('HD10mBoxPickup', spawns_10mmBox, hdb_10mm_persistent_spawning);
	// 10mm Casing
        Array<HDBLRSpawnAmmoEntry> spawns_10mmBrass;  
        spawns_10mmBrass.push(addAmmoentry('HDSpent9mm', hdb_10mm_casing_spawn_bias));
        spawns_10mmBrass.push(addAmmoentry('HDSpent355', hdb_10mm_casing_spawn_bias));
        addAmmo('HDSpent10mm', spawns_10mmBrass, hdb_10mm_persistent_spawning);

	// .45 LC Box Pickup
        Array<HDBLRSpawnAmmoEntry> spawns_45lcbox;  
        spawns_45lcbox.push(addAmmoentry('HD355BoxPickup', hdb_45lc_box_spawn_bias));
        addAmmo('HD45LCBoxPickup', spawns_45lcbox, hdb_45lc_persistent_spawning);
	// .45 LC Casing
        Array<HDBLRSpawnAmmoEntry> spawns_45lccasing;  
        spawns_45lccasing.push(addAmmoentry('HDSpent355', hdb_45lc_casing_spawn_bias));
        addAmmo('HDSpent45LC', spawns_45lccasing, hdb_45lc_persistent_spawning);

	// Gold .45 LC Box Pickup
        Array<HDBLRSpawnAmmoEntry> spawns_g45lcbox;  
        spawns_g45lcbox.push(addAmmoentry('HD355BoxPickup', hdb_g45lc_box_spawn_bias));
        addAmmo('HDGold45LCBoxPickup', spawns_g45lcbox, hdb_g45lc_persistent_spawning);
	// Gold .45 LC Casing
        Array<HDBLRSpawnAmmoEntry> spawns_g45lccasing;  
        spawns_g45lccasing.push(addAmmoentry('HDSpent355', hdb_g45lc_casing_spawn_bias));
        addAmmo('HDSpentGold45LC', spawns_g45lccasing, hdb_g45lc_persistent_spawning);

	// Less-Lethal Shell Box
        Array<HDBLRSpawnAmmoEntry> spawns_llsbox;  
        spawns_llsbox.push(addAmmoentry('ShellBoxPickup', hdb_LLS_shellbox_spawn_bias));
        addAmmo('LLShellBoxPickup', spawns_llsbox, hdb_LLS_persistent_spawning);
	// Less-Lethal Shell Pickup
        Array<HDBLRSpawnAmmoEntry> spawns_llspickup;  
        spawns_llspickup.push(addAmmoentry('ShellPickup', hdb_LLS_shell_spawn_bias));
        addAmmo('LLShellPickup', spawns_llspickup, hdb_LLS_persistent_spawning);
	// Less-Lethal Shell Ammo
        Array<HDBLRSpawnAmmoEntry> spawns_llsammo;  
        spawns_llsammo.push(addAmmoentry('HDShellAmmo', hdb_LLS_shell_spawn_bias));
        addAmmo('HDLLShellAmmo', spawns_llsammo, hdb_LLS_persistent_spawning);
	// Less-Lethal Shell Casing
        Array<HDBLRSpawnAmmoEntry> spawns_llscasing;  
        spawns_llscasing.push(addAmmoentry('HDSpentShell', hdb_LLS_casing_spawn_bias));
        addAmmo('HDLLSpentShell', spawns_llscasing, hdb_LLS_persistent_spawning);

	// Explosive Slug Box
        Array<HDBLRSpawnAmmoEntry> spawns_eslugbox;  
        spawns_eslugbox.push(addAmmoentry('ShellBoxPickup', hdb_ESlug_shellbox_spawn_bias));
        addAmmo('ExplosiveShellBoxPickup', spawns_eslugbox, hdb_ESlug_persistent_spawning);
	// Explosive Slug Pickup
        Array<HDBLRSpawnAmmoEntry> spawns_elugpickup;  
        spawns_elugpickup.push(addAmmoentry('ShellPickup', hdb_ESlug_shell_spawn_bias));
        addAmmo('ExplosiveShellPickup', spawns_elugpickup, hdb_ESlug_persistent_spawning);
	// Explosive Slug Ammo
        Array<HDBLRSpawnAmmoEntry> spawns_eslugammo;  
        spawns_eslugammo.push(addAmmoentry('HDShellAmmo', hdb_ESlug_shell_spawn_bias));
        addAmmo('HDExplosiveShellAmmo', spawns_eslugammo, hdb_ESlug_persistent_spawning);
	// Explosive Slug Casing
        Array<HDBLRSpawnAmmoEntry> spawns_eslugcasing;  
        spawns_eslugcasing.push(addAmmoentry('HDSpentShell', hdb_ESlug_casing_spawn_bias));
        addAmmo('HDSpentExplosiveShell', spawns_eslugcasing, hdb_ESlug_persistent_spawning);

	// Flare Shell Box
        Array<HDBLRSpawnAmmoEntry> spawns_fshellbox;  
        spawns_fshellbox.push(addAmmoentry('ShellBoxPickup', hdb_FShell_shellbox_spawn_bias));
        addAmmo('FlareShellBoxPickup', spawns_fshellbox, hdb_FShell_persistent_spawning);
	// Flare Shell Pickup
        Array<HDBLRSpawnAmmoEntry> spawns_fshellpickup;  
        spawns_fshellpickup.push(addAmmoentry('ShellPickup', hdb_FShell_shell_spawn_bias));
        addAmmo('FlareShellPickup', spawns_fshellpickup, hdb_FShell_persistent_spawning);
	// Flare Shell Ammo
        Array<HDBLRSpawnAmmoEntry> spawns_fshellammo;  
        spawns_fshellammo.push(addAmmoentry('HDShellAmmo', hdb_FShell_shell_spawn_bias));
        addAmmo('HDFlareAmmo', spawns_fshellammo, hdb_FShell_persistent_spawning);

	// .56 Caliber Musket Ball
        Array<HDBLRSpawnAmmoEntry> spawns_mball;  
        spawns_mball.push(addAmmoentry('HDSpent9mm', hdb_MBall_casing_spawn_bias));
        spawns_mball.push(addAmmoentry('HDSpent355', hdb_MBall_casing_spawn_bias));
        spawns_mball.push(addAmmoentry('HDSpentShell', hdb_MBall_casing_spawn_bias));
        addAmmo('HDBallAmmo', spawns_mball, hdb_MBall_persistent_spawning);

	// 4-Gauge Saboted Slug Box
        Array<HDBLRSpawnAmmoEntry> spawns_4gssbox;  
        spawns_4gssbox.push(addAmmoentry('ShellBoxPickup', hdb_4gss_shellbox_spawn_bias));
        addAmmo('HD4GSSpawn', spawns_4gssbox, hdb_4gss_persistent_spawning);
	// 4-Gauge Saboted Slug Pickup
        Array<HDBLRSpawnAmmoEntry> spawns_4gsspickup;  
        spawns_4gsspickup.push(addAmmoentry('ShellPickup', hdb_4gss_shell_spawn_bias));
        addAmmo('HDFumbled4GS', spawns_4gsspickup, hdb_4gss_persistent_spawning);
	// 4-Gauge Saboted Slug Ammo
        Array<HDBLRSpawnAmmoEntry> spawns_4gssammo;  
        spawns_4gssammo.push(addAmmoentry('HDShellAmmo', hdb_4gss_shell_spawn_bias));
        addAmmo('HD4GSAmmo', spawns_4gssammo, hdb_4gss_persistent_spawning);
	// 4-Gauge Saboted Slug Casing
        Array<HDBLRSpawnAmmoEntry> spawns_4gsscasing;  
        spawns_4gsscasing.push(addAmmoentry('HDSpentShell', hdb_4gss_casing_spawn_bias));
        addAmmo('HDSpent4GS', spawns_4gsscasing, hdb_4gss_persistent_spawning);

	// 5mm Bumblebee Rimfire Box Pickup
        Array<HDBLRSpawnAmmoEntry> spawns_5mmbox;  
        spawns_5mmbox.push(addAmmoentry('HD4mMag', hdb_5mm_box_spawn_bias));
        addAmmo('PB_5mmBoxPickup', spawns_5mmbox, hdb_5mm_persistent_spawning);
	// 5mm Bumblebee Rimfire Casing
        Array<HDBLRSpawnAmmoEntry> spawns_5mmcasing;  
        spawns_5mmcasing.push(addAmmoentry('HDSpent9mm', hdb_5mm_casing_spawn_bias));
        addAmmo('HDSpent5mmMR', spawns_5mmcasing, hdb_5mm_persistent_spawning);

	// .50 Action Mega Box Pickup
        Array<HDBLRSpawnAmmoEntry> spawns_50ambox;  
        spawns_5mmbox.push(addAmmoentry('HD9mBoxPickup', hdb_50am_box_spawn_bias));
        spawns_5mmbox.push(addAmmoentry('HD355BoxPickup', hdb_50am_box_spawn_bias));
        addAmmo('PB_50AMBoxPickup', spawns_50ambox, hdb_50am_persistent_spawning);
	// .50 Action Mega Casing
        Array<HDBLRSpawnAmmoEntry> spawns_50amcasing;  
        spawns_50amcasing.push(addAmmoentry('HDSpent9mm', hdb_50am_casing_spawn_bias));
        spawns_50amcasing.push(addAmmoentry('HDSpent355', hdb_50am_casing_spawn_bias));
        addAmmo('HDSpent50AM', spawns_50amcasing, hdb_50am_persistent_spawning);

	// 6mm Flechette Box Pickup
        Array<HDBLRSpawnAmmoEntry> spawns_6mmBox;  
        spawns_6mmBox.push(addAmmoentry('HD9mBoxPickup', hdb_6mm_box_spawn_bias));
        addAmmo('HD6mmFlechetteBoxPickup', spawns_6mmBox, hdb_6mm_persistent_spawning);
	// 6mm Flechette Casing
        Array<HDBLRSpawnAmmoEntry> spawns_6mmcasing;  
        spawns_6mmcasing.push(addAmmoentry('HDSpent9mm', hdb_6mm_casing_spawn_bias));
        addAmmo('HDSpent6mmFlechette', spawns_6mmcasing, hdb_6mm_persistent_spawning);

	// 20mm Grenade Ammo
        Array<HDBLRSpawnAmmoEntry> spawns_20mmgrenades;  
        spawns_20mmgrenades.push(addAmmoentry('RocketBigPickup', hdb_20mm_rbox_spawn_bias));
        addAmmo('WAN_20mmGrenadeAmmo', spawns_20mmgrenades, hdb_20mm_persistent_spawning);

	// Thunder Rockets
        Array<HDBLRSpawnAmmoEntry> spawns_thunderrockets;  
        spawns_thunderrockets.push(addAmmoentry('RocketBigPickup', hdb_ThuRKT_rbox_spawn_bias));
        spawns_thunderrockets.push(addAmmoentry('HEATAmmo', hdb_ThuRKT_rbox_spawn_bias));
        addAmmo('WAN_ThuRKT', spawns_thunderrockets, hdb_ThuRKT_persistent_spawning);

	// Tortoise Missiles
        Array<HDBLRSpawnAmmoEntry> spawns_tortrockets;  
        spawns_tortrockets.push(addAmmoentry('RocketBigPickup', hdb_TortRKT_rbox_spawn_bias));
        spawns_tortrockets.push(addAmmoentry('HEATAmmo', hdb_TortRKT_rbox_spawn_bias));
        addAmmo('Wan_TortRkt', spawns_tortrockets, hdb_TortRKT_persistent_spawning);

	// .30-06 Box Pickup
        Array<HDBLRSpawnAmmoEntry> spawns_3006box;  
        spawns_5mmbox.push(addAmmoentry('HD7mBoxPickup', hdb_3006_box_spawn_bias));
        spawns_5mmbox.push(addAmmoentry('HDRocketAmmo', hdb_3006_box_spawn_bias));
        addAmmo('HD3006BoxPickup', spawns_3006box, hdb_3006_persistent_spawning);
	// .30-06 Casing/Brass
        Array<HDBLRSpawnAmmoEntry> spawns_3006casing;  
        spawns_3006casing.push(addAmmoentry('SevenMilBrass', hdb_3006_casing_spawn_bias));
        addAmmo('HDSpent3006', spawns_3006casing, hdb_3006_persistent_spawning);
}
   
    // Random stuff, stores it and forces negative values just to be 0.
    bool giverandom(int chance)
    {
        bool result = false;
        int iii = random(0, chance);
        if(iii < 0)
            iii = 0;
        if (iii == 0)
        {
            if(chance > -1)
                result = true;
        }
       
        return result;
    }
 
    // Tries to create the ammunition via random spawning.
    bool trycreateAmmo(worldevent e, HDBLRSpawnAmmo f, int g, bool rep)
    {
        bool result = false;
        if(giverandom(f.spawnreplaces[g].chance))
        {
            vector3 spawnpos = e.thing.pos;
            let spawnAmmo = Actor.Spawn(f.spawnname, (spawnpos.x, spawnpos.y, spawnpos.z));
            if(spawnAmmo)
            {
                if(rep)
                {
                    e.thing.destroy();
                    result = true;
                }
            }
        }
        return result;
    }
   
    override void worldthingspawned(worldevent e)
     {
        string candidatename;
       
        // loop controls.
        int i, j;
       
        // Return if range.
        if(level.MapName ~== "RANGE")
        {
                return;
        }

        // Populates the main arrays if they haven't been already.
        if(!cvarsAvailable)
            init();
       
       
        for(i = 0; i < blacklist.size(); i++)
        {
            if (e.thing is blacklist[i])
                return;
        }
       
        // Checks for null events.
        if(!e.Thing)
        {
            return;
        }
 
        candidatename  = e.Thing.GetClassName();
        candidatename = candidatename.makelower();
       
        // Iterates through the list of ammo candidates for e.thing.
        for(i = 0; i < ammospawnlistsize; i++)
        {
            // Tries to cast the ammo as an inventory.
            let thing_inv_ptr = Inventory(e.thing);
       
            // Checks if the ammo in question is owned.
            bool owned = thing_inv_ptr && (thing_inv_ptr.owner);
 
            // Checks if the level has been loaded more than 1 tic.
            bool prespawn = !(level.maptime > 1);
           
            // Checks if persistent spawning is on.
            bool persist = (ammospawnlist[i].isPersistent);
           
            // if the ammo is owned (doesn't retain owner ptr),
            // do not replace it.
            if ((prespawn || persist) && (!owned && prespawn))
            {
                int original_i = i;
                for(j = 0; j < ammospawnlist[original_i].spawnreplacessize; j++)
                {
                    if(ammospawnlist[i].spawnreplaces[j].name == candidatename)
                    {
                        if(trycreateAmmo(e, ammospawnlist[i], j, ammospawnlist[i].replaceAmmo))
                        {
                            j = ammospawnlist[i].spawnreplacessize;
                            i = ammospawnlistsize;
                        }
                    }
                }
            }
        }
    }
}
